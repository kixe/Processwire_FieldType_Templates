<?php // namespace ProcessWire;

/**
 * Fieldtype Templates
 * Field that stores reference to one or more templates.
 * Define Inputfield, Label format and selectable Templates in Fieldsettings.
 * formatted value is an WireArray object with items of type template
 * unformatted value is an array with template IDs
 *
 *
 * @author kixe (Christoph Thelen), Hani AbuGhazaleh (Hani) 
 * Copyright (C) 2016 by Christoph Thelen
 * Copyright (C) 2014 by Hani AbuGhazaleh
 * @license  Licensed under the MIT License (MIT), see LICENSE.TXT
 *
 * @link http://qualyweb.com
 * 
 * made for 
 * ProcessWire 2.x, 3.x 
 * Copyright (C) 2016 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT * 
 * http://processwire.com
 *
 * @version 1.0.1
 * 
 * changelog
 * @since 1.0.1
 *
 */
class FieldtypeTemplates extends FieldtypeMulti {

    public static function getModuleInfo() {
        return array(
            'title' => 'Select Template',
            'version' => 101,
            'summary' => 'Field that stores the ID of one or more templates. Get instance of template as formatted value.',
            'author' => 'hani, kixe',
        );
    }

    public function getBlankValue(Page $page, Field $field) {
        return array();
    }

    public function sanitizeValue(Page $page, Field $field, $value) {
        if (!$value) return array();
        if (!is_array($value)) $value = array($value);
        foreach ($value as $k => $v) {
            if (is_numeric($v) && $this->templates->get($v)) continue;
            if ($v instanceof Template) continue;
            unset($value[$k]);
        }
        return $value;
    }

    public function ___wakeupValue(Page $page, Field $field, $value) {
        $v = $this->getBlankValue($page, $field);
        if (empty($value)) return $v;
        foreach ($value as $templateID) {
            $v[] = (int) $templateID;
        }
        return $v;
    }

    public function ___sleepValue(Page $page, Field $field, $value) {
        if (!$value) return array();
        $a = array();
        foreach ($value as $template) {
            if (is_int($template)) $templateID = $template;
            else $templateID = $this->wire('templates')->get($template)->id;
            $a[] = (int) $templateID;
        }
        return $a;
    }

    /**
     * Instantiate the templates
     *
     * This method is only used when $page->outputFormatting is true.
     *
     */
    public function ___formatValue(Page $page, Field $field, $value) {
        $a = new WireArray();
        foreach ($value as $k => $v) {
            if ($v instanceof Template) continue;
            if (is_int($v) || is_numeric($v)) $template = $this->wire('templates')->get($v);
            if ($template) $a->add($template);
        }
        return $a;
    }

    public function getInputfield(Page $page, Field $field) {

        // get (set default) Inputfieldtype
        $class = ($field->input_type)?$field->input_type:'InputfieldSelect';
        // set Inputfield
        $inputfield = $this->modules->get($class);
        $inputfield->attr('name', $field->name);
        $value = $this->sleepValue($page, $field, $page->$field);
        if ($inputfield instanceof InputfieldSelectMultiple === false) $value = array_shift($value);

        if (!empty($field->templateTypes)) {
            $selector = "id=";

            foreach ($field->templateTypes as $templateType) {
                $selector .= $templateType . '|';
            }
            $selector = rtrim($selector, '|');
            $templates = $this->fuel('templates')->find($selector);
        } else {
            $templates = $this->fuel('templates');
        }

        foreach ($templates as $template) {
            $id = $template->id;
            // $attributes = in_array($id, $value)?  array('selected'=>'selected'):null;
            if (strlen($template->label) == 0||$field->label_format == 0) $label = $template->name;
            else if ($field->label_format == 1) $label = $template->label;
            else if ($field->label_format == 2) $label = "$template->name ($template->label)";
            else if ($field->label_format == 3) $label = "$template->label ($template->name)";

            $inputfield->addOption($id, $label);
        }
        return $inputfield;
    }

    public function getDatabaseSchema(Field $field) {
        $schema = parent::getDatabaseSchema($field);
        $schema['data'] = 'int NOT NULL';
        $schema['keys']['data'] = 'KEY data (data, pages_id, sort)';
        return $schema;
    }

    public function ___getCompatibleFieldtypes(Field $field) {
        $fieldtypes = new Fieldtypes();
        return $fieldtypes;
    }

    public function ___getConfigInputfields(Field $field) {

        $inputfields = parent::___getConfigInputfields($field);

        // choose inputfieldtype
        $f = $this->modules->get('InputfieldSelect');
        $f->label = $this->_('Inputfieldtype');
        $f->columnWidth = 50;
        $f->attr('name', 'input_type');
        $f->attr('value', $field->input_type);
        $f->required = true;
        $f->description = $this->_('Select the type of Inputfield.');
        $f->notes = '* ' . $this->_('Types indicated with an asterisk are for multiple selection. Maybe 3rd party Inputfields will not work as expected. Please test carefully.');
        $f->addOption('InputfieldSelect', 'Select');
        foreach($this->modules->get("InputfieldPage")->data['inputfieldClasses'] as $class) {
            $module = $this->modules->get($class);
            if($module instanceof  InputfieldSelect) {
                $label = str_replace("Inputfield", '', $class);
                if($module instanceof InputfieldHasArrayValue) $label .= "*";
                $f->addOption($class, $label);
            }
        }
        $inputfields->append($f);

        // choose label format
        $f = $this->modules->get('InputfieldSelect');
        $f->label = $this->_('Label');
        $f->columnWidth = 50;
        $f->attr('name', 'label_format');
        $f->attr('value', $field->label_format);
        $f->required = true;
        $f->description = $this->_('What to show as Label in the Inputfield.');
        $f->notes = $this->_('If a label is not defined, there is always a fallback to the name');
        $f->addOption(0, 'Name');
        $f->addOption(1, 'Label');
        $f->addOption(2, 'Name (Label)');
        $f->addOption(3, 'Label (Name)');
        $inputfields->append($f);

        $templateTypes = array();
        $lastType = '';

        $f = $this->modules->get("InputfieldCheckboxes");
        $f->optionColumns = 4;
        $f->attr('name', 'templateTypes');

        foreach ($this->templates as $template) {
            if ($template->id == $lastType)
                continue;
            $f->addOption($template->id, $template->name);
            $lastType = $template->id;
        }

        $f->attr('value', is_array($field->templateTypes) ? $field->templateTypes : array());
        $f->label = "Selectable Templates";
        $f->description = "Check all of the templates that may be selectable in this field. If none are selected, then all types will be allowed.";
        $inputfields->append($f);

        return $inputfields;
    }
}
